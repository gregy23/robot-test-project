trigger: none  # Don't trigger on code changes

resources:
  pipelines:
    - pipeline: AutomatedTestingPipeline  # Alias used if needed in jobs
      source: AutomatedTesting-.NET Desktop-CI
      trigger: true  # Trigger when the source pipeline completes

variables:
  ROBOT_REPORTS_DIR: 'robot_results'

pool:
  vmImage: 'windows-latest'

steps:

# 1. Use Python 3.11
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'

# 2. Install Microsoft Edge WebDriver manually
- powershell: |
    $edgeVersion = (Get-Item "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe").VersionInfo.ProductVersion
    Write-Host "Detected Edge version: $edgeVersion"

    $url = "https://msedgedriver.azureedge.net/$edgeVersion/edgedriver_win64.zip"
    Write-Host "Downloading WebDriver from $url"

    Invoke-WebRequest -Uri $url -OutFile "edgedriver.zip"
    Expand-Archive -Path "edgedriver.zip" -DestinationPath "$(Build.SourcesDirectory)\edgedriver" -Force

    $env:PATH += ";$(Build.SourcesDirectory)\edgedriver"
  displayName: 'Install Edge WebDriver manually'

# 3. Install Robot Framework and SeleniumLibrary with fail-fast
- script: |
    python -m pip install --upgrade pip || exit 1
    pip install robotframework==6.1.1 || exit 1
    pip install robotframework-seleniumlibrary==6.1.2 || exit 1
  displayName: 'Install Robot Framework and dependencies with fail-fast'

# 4. Debug: Confirm installations
- script: |
    where python
    where pip
    where robot
    pip list
  displayName: 'Debug: Confirm installations'

# 5. Debug: Show project structure
- script: |
    echo "Current directory:"
    cd
    echo "Repo root contents:"
    dir
    echo "robot_test folder contents:"
    dir robot_test
  displayName: 'Debug: Show project structure'

# 6. Ensure report directory exists
- script: |
    if not exist "$(ROBOT_REPORTS_DIR)" mkdir "$(ROBOT_REPORTS_DIR)"
  displayName: 'Ensure robot_results directory exists'

# 7. Run Robot Framework Test
- script: |
    robot --variable BROWSER:edge ^
          --output "$(ROBOT_REPORTS_DIR)\output.xml" ^
          --log "$(ROBOT_REPORTS_DIR)\log.html" ^
          --report "$(ROBOT_REPORTS_DIR)\report.html" ^
          robot_test/
  displayName: 'Run Robot Framework Test'
  continueOnError: true  # Continue even if tests fail

# 7.5 Check if Robot tests failed and set pipeline failure
- powershell: |
    [xml]$robotOutput = Get-Content "$(ROBOT_REPORTS_DIR)\output.xml"
    $failed = $robotOutput.output.statistics.total.stat | Where-Object { $_.fail -gt 0 }

    if ($failed) {
        Write-Error "Regression tests failed! Failing pipeline to trigger rollback."
        exit 1
    } else {
        Write-Host "Regression tests passed!"
    }
  displayName: 'Check Robot Test Result and Fail Pipeline if Needed'

# 8. Convert Robot Output to JUnit
- script: |
    rebot --xunit "$(ROBOT_REPORTS_DIR)\xunit.xml" "$(ROBOT_REPORTS_DIR)\output.xml"
  displayName: 'Convert Robot Output to JUnit'
  condition: always()

# 9. Publish test results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(ROBOT_REPORTS_DIR)\xunit.xml'
    testRunTitle: 'Robot Framework Test Results'
  condition: always()

# 10. Publish all Robot output files as artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(ROBOT_REPORTS_DIR)'
    artifactName: 'RobotResults'
  condition: always()


# 11. Rollback if regression tests fail
- script: |
    echo Starting rollback process...
    echo Here you should add your rollback steps (redeploy previous build, etc.)
    REM Example placeholder rollback commands
    REM az webapp deployment source config-zip --resource-group <your-rg> --name <your-app-name> --src <path-to-previous-build.zip>
  displayName: 'Rollback Deployment'
  condition: failed()