trigger: none  # Don't trigger on code changes

resources:
  pipelines:
    - pipeline: AutomatedTestingPipeline
      source: AutomatedTesting-.NET Desktop-CI
      trigger: true  # Trigger when the source pipeline completes

variables:
  ROBOT_REPORTS_DIR: 'robot_results'

pool:
  vmImage: 'windows-latest'

steps:

# 1. Use Python 3.11
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'

# 2. Install Edge WebDriver manually
- powershell: |
    $edgeVersion = (Get-Item "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe").VersionInfo.ProductVersion
    Write-Host "Detected Edge version: $edgeVersion"
    $url = "https://msedgedriver.azureedge.net/$edgeVersion/edgedriver_win64.zip"
    Write-Host "Downloading WebDriver from $url"
    Invoke-WebRequest -Uri $url -OutFile "edgedriver.zip"
    Expand-Archive -Path "edgedriver.zip" -DestinationPath "$(Build.SourcesDirectory)\edgedriver" -Force
    $env:PATH += ";$(Build.SourcesDirectory)\edgedriver"
  displayName: 'Install Edge WebDriver manually'

# 3. Install Robot Framework and dependencies
- script: |
    python -m pip install --upgrade pip || exit 1
    pip install robotframework==6.1.1 || exit 1
    pip install robotframework-seleniumlibrary==6.1.2 || exit 1
  displayName: 'Install Robot Framework and dependencies'

# 4. Run Robot Framework tests
- script: |
    robot --variable BROWSER:edge ^
          --output "$(ROBOT_REPORTS_DIR)\output.xml" ^ 
          --log "$(ROBOT_REPORTS_DIR)\log.html" ^ 
          --report "$(ROBOT_REPORTS_DIR)\report.html" ^ 
          robot_test/
  displayName: 'Run Robot Framework Tests'
  continueOnError: true

# 5. Convert Robot Output to JUnit
- script: |
    rebot --xunit "$(ROBOT_REPORTS_DIR)\xunit.xml" "$(ROBOT_REPORTS_DIR)\output.xml"
  displayName: 'Convert Robot Output to JUnit'
  condition: always()

# 6. Publish test results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(ROBOT_REPORTS_DIR)\xunit.xml'
    testRunTitle: 'Robot Framework Test Results'
  condition: always()

# 7. Publish all Robot output files as artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(ROBOT_REPORTS_DIR)'
    artifactName: 'RobotResults'
  condition: always()

# 8. Get Previous Successful Build ID (2nd latest)
- powershell: |
    $personalAccessToken = "$(System.AccessToken)"  # **Added OAuth token access**
    $project = "AutomatedTesting"
    $pipelineName = "AutomatedTesting-.NET Desktop-CI"
    $organization = "$(System.CollectionUri)"
    $definitionIdUrl = "$($organization)$project/_apis/build/definitions?name=$pipelineName&api-version=7.0"

    $definitionIdResponse = Invoke-RestMethod -Uri $definitionIdUrl -Headers @{Authorization = "Bearer $personalAccessToken"} -Method Get
    $definitionId = $definitionIdResponse.value[0].id

    $buildsUrl = "$($organization)$project/_apis/build/builds?definitions=$definitionId&resultFilter=succeeded&statusFilter=completed&$top=2&queryOrder=finishTimeDescending&api-version=7.0"
    $buildsResponse = Invoke-RestMethod -Uri $buildsUrl -Headers @{Authorization = "Bearer $personalAccessToken"} -Method Get

    if ($buildsResponse.count -lt 2) {
      Write-Error "Not enough builds to perform rollback."
      exit 1
    }

    $secondBuildId = $buildsResponse.value[1].id
    Write-Host "##vso[task.setvariable variable=PreviousBuildId]$secondBuildId"
  displayName: 'Get Previous Successful Build ID'
  env:
    System.AccessToken: $(System.AccessToken)  # **Added OAuth token access in env**
  condition: failed()

# 9. Download Previous Successful Artifact (2nd latest)
- task: DownloadPipelineArtifact@2
  inputs:
    project: 'AutomatedTesting'
    pipeline: 'AutomatedTesting-.NET Desktop-CI'
    buildType: 'specific'
    buildVersionToDownload: 'specific'
    specificBuildWithTriggering: false
    runId: '$(PreviousBuildId)'
    artifactName: 'drop'
    targetPath: '$(Build.ArtifactStagingDirectory)/rollback'
  displayName: 'Download Previous Successful Artifact (2nd Latest)'
  condition: and(failed(), ne(variables['PreviousBuildId'], ''))
  continueOnError: true

# 10. Inspect rollback artifact contents
- powershell: |
    Write-Host "Checking contents of rollback folder:"
    Get-ChildItem -Recurse "$(Build.ArtifactStagingDirectory)\rollback"
  displayName: 'Inspect Rollback Artifact'
  condition: failed()

# 11. Conditional redeploy with safe folder creation
- powershell: |
    $deployPath = "C:\YourDeploymentFolder"
    if (!(Test-Path $deployPath)) {
      New-Item -ItemType Directory -Force -Path $deployPath
    }

    if (Test-Path "$(Build.ArtifactStagingDirectory)\rollback") {
      Write-Host "Rollback artifact found. Re-deploying the previous stable build..."
      xcopy "$(Build.ArtifactStagingDirectory)\rollback\*" "$deployPath" /E /Y /I
    } else {
      Write-Warning "No rollback artifact found. Skipping deployment."
    }
  displayName: 'Conditional Redeploy of Previous Artifact'
  condition: failed()

# 12. Verify rollback folder contents
- powershell: |
    $path = "C:\YourDeploymentFolder"
    if (Test-Path $path) {
      Write-Host "Verifying files in deployment directory..."
      Get-ChildItem -Recurse $path
    } else {
      Write-Warning "Deployment folder does not exist."
      exit 1
    }
  displayName: 'Verify Rollback Files'
  condition: failed()
