trigger: none  # Don't trigger on code changes

resources:
  pipelines:
    - pipeline: AutomatedTestingPipeline
      source: AutomatedTesting-.NET Desktop-CI
      trigger: true  # Trigger when the source pipeline completes

variables:
  ROBOT_REPORTS_DIR: 'robot_results'

pool:
  vmImage: 'windows-latest'

steps:

# 1. Use Python 3.11
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.11'

# 2. Install Edge WebDriver manually
- powershell: |
    $edgeVersion = (Get-Item "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe").VersionInfo.ProductVersion
    Write-Host "Detected Edge version: $edgeVersion"
    $url = "https://msedgedriver.azureedge.net/$edgeVersion/edgedriver_win64.zip"
    Write-Host "Downloading WebDriver from $url"
    Invoke-WebRequest -Uri $url -OutFile "edgedriver.zip"
    Expand-Archive -Path "edgedriver.zip" -DestinationPath "$(Build.SourcesDirectory)\edgedriver" -Force
    $env:PATH += ";$(Build.SourcesDirectory)\edgedriver"
  displayName: 'Install Edge WebDriver manually'

# 3. Install Robot Framework and dependencies
- script: |
    python -m pip install --upgrade pip || exit 1
    pip install robotframework==6.1.1 || exit 1
    pip install robotframework-seleniumlibrary==6.1.2 || exit 1
  displayName: 'Install Robot Framework and dependencies'

# 4. Run Robot Framework tests
- script: |
    robot --variable BROWSER:edge ^
          --output "$(ROBOT_REPORTS_DIR)\output.xml" ^
          --log "$(ROBOT_REPORTS_DIR)\log.html" ^
          --report "$(ROBOT_REPORTS_DIR)\report.html" ^
          robot_test/
  displayName: 'Run Robot Framework Tests'
  continueOnError: true  # Continue even if tests fail

# 5. Convert Robot Output to JUnit
- script: |
    rebot --xunit "$(ROBOT_REPORTS_DIR)\xunit.xml" "$(ROBOT_REPORTS_DIR)\output.xml"
  displayName: 'Convert Robot Output to JUnit'
  condition: always()

# 6. Publish test results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(ROBOT_REPORTS_DIR)\xunit.xml'
    testRunTitle: 'Robot Framework Test Results'
  condition: always()

# 7. Publish all Robot output files as artifacts
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(ROBOT_REPORTS_DIR)'
    artifactName: 'RobotResults'
  condition: always()

# 8. Download last successful artifact from any branch
- task: DownloadPipelineArtifact@2
  inputs:
    buildType: 'specific'
    project: 'AutomatedTesting'
    pipeline: 'AutomatedTesting-.NET Desktop-CI'
    buildVersionToDownload: 'latest'
    artifactName: 'drop'
    targetPath: '$(Build.ArtifactStagingDirectory)/rollback'
  displayName: 'Download Previous Successful Artifact'
  condition: failed()
  continueOnError: true

# 9. Conditional redeploy using xcopy with /I to avoid prompt
- powershell: |
    if (Test-Path "$(Build.ArtifactStagingDirectory)\rollback") {
      Write-Host "Rollback artifact found. Re-deploying the previous stable build..."
      xcopy "$(Build.ArtifactStagingDirectory)\rollback\*" "C:\YourDeploymentFolder" /E /Y /I
    } else {
      Write-Warning "No rollback artifact found. Skipping deployment."
    }
  displayName: 'Conditional Redeploy of Previous Artifact'
  condition: failed()

# 10. Optional: Verify rollback folder contents
- script: |
    echo "Verifying files in deployment directory..."
    dir "C:\YourDeploymentFolder"
  displayName: 'Verify Rollback Files'
  condition: failed()
